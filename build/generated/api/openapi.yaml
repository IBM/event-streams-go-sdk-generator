openapi: 3.0.1
info:
  description: The administration REST API for IBM Event Streams on Cloud.
  title: IBM Event Streams Administration REST API
  version: 1.1.0
servers:
- url: /
paths:
  /admin/topics:
    get:
      description: |
        Returns a list containing information about all of the Kafka topics that are defined for an instance of the Event Streams service. If there are currently no topics defined then an empty list is returned.
      operationId: ListTopics
      parameters:
      - description: |
          A filter to be applied to the topic names. A simple filter can be specified as a string with asterisk (`*`) wildcards representing 0 or more characters, e.g. `topic-name*` will filter all topic names that begin with the string `topic-name` followed by any character sequence. A more complex filter pattern can be used by surrounding a regular expression in forward slash (`/`) delimiters, e.g. `/topic-name.* /`.
        in: query
        name: topic_filter
        schema:
          type: string
      - description: The number of topic names to be returns.
        in: query
        name: per_page
        schema:
          type: integer
      - description: |
          The page number to be returned. The number 1 represents the first page. The default value is 1.
        in: query
        name: page
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/topic_list'
          description: |
            Success.  A list of topic information objects is returned in the response body.
          headers:
            Strict-Transport-Security:
              description: |
                Specifies a period of time during which the user agent should only access the server using secure HTTPS connections.
              schema:
                default: max-age=31536000; includeSubDomains
                type: string
            Cache-Control:
              description: |
                Forces caches to submit the request to the origin server for validation before releasing a cached copy. And the cache should not store anything about the client request or server response.
              schema:
                default: no-cache, no-store
                type: string
            X-Global-Transaction-Id:
              description: |
                The transaction ID of the request for debugging purpose. If the header is set on the request, it will be honored. If not, it will be generated. In the event of a non-200 error return code, the transaction ID is also returned in the JSON error response as 'incident_id'.
              schema:
                type: string
            Pragma:
              description: |
                Forces caches to submit the request to the origin server for validation before releasing a cached copy. Same as 'Cache-Control: no-cache'. It is used for backwards compatibility with HTTP/1.0.
              schema:
                default: no-cache
                type: string
            X-Total-Count:
              description: The total number of topics available.
              schema:
                type: integer
            Link:
              description: |
                The client can scroll through pages using the links generated in the Link header. There are 4 links encoded in the header which represent the first, last, next and previous operations. An example header is Link: <http://kafka.admin.host/admin/topics?page=2&per_page=20>; rel="next", <http://kafka.admin.host/admin/topics?page=1&per_page=20>; rel="first", <http://kafka.admin.host/admin/topics?page=5&per_page=20>; rel="last"
              schema:
                type: string
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information was missing or bad.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Service was unavailable.
      security:
      - APIKeyAuth: []
      - TokenAuth: []
      - BasicAuth: []
      summary: Get a list of topics.
    post:
      description: Create a new topic.
      operationId: CreateTopic
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/topic_create_request'
        description: The new topic to be created.
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/empty'
          description: |
            Topic creation request accepted. Topic creation occurs asynchronously, and therefore invoking the list topics REST endpoint may not immediately show newly created topics.
          headers:
            Strict-Transport-Security:
              description: |
                Specifies a period of time during which the user agent should only access the server using secure HTTPS connections.
              schema:
                default: max-age=31536000; includeSubDomains
                type: string
            Cache-Control:
              description: |
                Forces caches to submit the request to the origin server for validation before releasing a cached copy. And the cache should not store anything about the client request or server response.
              schema:
                default: no-cache, no-store
                type: string
            X-Global-Transaction-Id:
              description: |
                The transaction ID of the request for debugging purpose. If the header is set on the request, it will be honored. If not, it will be generated. In the event of a non-200 error return code, the transaction ID is also returned in the JSON error response as 'incident_id'.
              schema:
                type: string
            Pragma:
              description: |
                Forces caches to submit the request to the origin server for validation before releasing a cached copy. Same as 'Cache-Control: no-cache'. It is used for backwards compatibility with HTTP/1.0.
              schema:
                default: no-cache
                type: string
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: The request body was invalid JSON.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information was missing or bad.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Not authorized to perform the operation.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: The server was not able to process the request body.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Service was unavailable.
      security:
      - APIKeyAuth: []
      - TokenAuth: []
      - BasicAuth: []
      summary: Create a new topic.
      x-codegen-request-body-name: topic_create
  /admin/topics/{topic_name}:
    delete:
      description: Delete a topic.
      operationId: DeleteTopic
      parameters:
      - description: The topic name for the topic to be listed.
        in: path
        name: topic_name
        required: true
        schema:
          type: string
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/empty'
          description: |
            The Topic delete request accepted. The Kafka topic deletion process occurs asynchronously. Duplicate deletion requests for a topic which is in the process of being deleted will return this status code. Requests to delete a non-existent topic will also return this status code.
          headers:
            Strict-Transport-Security:
              description: |
                Specifies a period of time during which the user agent should only access the server using secure HTTPS connections.
              schema:
                default: max-age=31536000; includeSubDomains
                type: string
            Cache-Control:
              description: |
                Forces caches to submit the request to the origin server for validation before releasing a cached copy. And the cache should not store anything about the client request or server response.
              schema:
                default: no-cache, no-store
                type: string
            X-Global-Transaction-Id:
              description: |
                The transaction ID of the request for debugging purpose. If the header is set on the request, it will be honored. If not, it will be generated. In the event of a non-200 error return code, the transaction ID is also returned in the JSON error response as 'incident_id'.
              schema:
                type: string
            Pragma:
              description: |
                Forces caches to submit the request to the origin server for validation before releasing a cached copy. Same as 'Cache-Control: no-cache'. It is used for backwards compatibility with HTTP/1.0.
              schema:
                default: no-cache
                type: string
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information was missing or bad.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Not authorized to perform the operation.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: The requested resource was not found.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Service was unavailable.
      security:
      - APIKeyAuth: []
      - TokenAuth: []
      - BasicAuth: []
      summary: Delete a topic.
    get:
      description: Get detailed information on a topic.
      operationId: GetTopic
      parameters:
      - description: The topic name for the topic to be listed.
        in: path
        name: topic_name
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/topic_detail'
          description: Returns a detailed description of a single topic.
          headers:
            Strict-Transport-Security:
              description: |
                Specifies a period of time during which the user agent should only access the server using secure HTTPS connections.
              schema:
                default: max-age=31536000; includeSubDomains
                type: string
            Cache-Control:
              description: |
                Forces caches to submit the request to the origin server for validation before releasing a cached copy. And the cache should not store anything about the client request or server response.
              schema:
                default: no-cache, no-store
                type: string
            X-Global-Transaction-Id:
              description: |
                The transaction ID of the request for debugging purpose. If the header is set on the request, it will be honored. If not, it will be generated. In the event of a non-200 error return code, the transaction ID is also returned in the JSON error response as 'incident_id'.
              schema:
                type: string
            Pragma:
              description: |
                Forces caches to submit the request to the origin server for validation before releasing a cached copy. Same as 'Cache-Control: no-cache'. It is used for backwards compatibility with HTTP/1.0.
              schema:
                default: no-cache
                type: string
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information was missing or bad.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: The requested resource was not found.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Service was unavailable.
      security:
      - APIKeyAuth: []
      - TokenAuth: []
      - BasicAuth: []
      summary: Get detailed information on a topic.
    patch:
      description: |
        Increase the number of partitions and/or update one or more topic configuration parameters.
      operationId: UpdateTopic
      parameters:
      - description: The topic name for the topic to be listed.
        in: path
        name: topic_name
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/topic_update_request'
        description: The new partition number or the configurations to be updated
          for the topic.
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/empty'
          description: Request was accepted.
          headers:
            Strict-Transport-Security:
              description: |
                Specifies a period of time during which the user agent should only access the server using secure HTTPS connections.
              schema:
                default: max-age=31536000; includeSubDomains
                type: string
            Cache-Control:
              description: |
                Forces caches to submit the request to the origin server for validation before releasing a cached copy. And the cache should not store anything about the client request or server response.
              schema:
                default: no-cache, no-store
                type: string
            X-Global-Transaction-Id:
              description: |
                The transaction ID of the request for debugging purpose. If the header is set on the request, it will be honored. If not, it will be generated. In the event of a non-200 error return code, the transaction ID is also returned in the JSON error response as 'incident_id'.
              schema:
                type: string
            Pragma:
              description: |
                Forces caches to submit the request to the origin server for validation before releasing a cached copy. Same as 'Cache-Control: no-cache'. It is used for backwards compatibility with HTTP/1.0.
              schema:
                default: no-cache
                type: string
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: The request body was invalid JSON.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Authentication information was missing or bad.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Not authorized to perform the operation.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: The requested resource was not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: The server was not able to process the request body.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Service was unavailable.
      security:
      - APIKeyAuth: []
      - TokenAuth: []
      - BasicAuth: []
      summary: |
        Increase the number of partitions and/or update one or more topic configuration parameters.
      x-codegen-request-body-name: topic_update
components:
  parameters:
    topic_filter:
      description: |
        A filter to be applied to the topic names. A simple filter can be specified as a string with asterisk (`*`) wildcards representing 0 or more characters, e.g. `topic-name*` will filter all topic names that begin with the string `topic-name` followed by any character sequence. A more complex filter pattern can be used by surrounding a regular expression in forward slash (`/`) delimiters, e.g. `/topic-name.* /`.
      in: query
      name: topic_filter
      schema:
        type: string
    per_page:
      description: The number of topic names to be returns.
      in: query
      name: per_page
      schema:
        type: integer
    page:
      description: |
        The page number to be returned. The number 1 represents the first page. The default value is 1.
      in: query
      name: page
      schema:
        type: integer
    topic_name:
      description: The topic name for the topic to be listed.
      in: path
      name: topic_name
      required: true
      schema:
        type: string
  requestBodies:
    topic_create:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/topic_create_request'
      description: The new topic to be created.
      required: true
    topic_update:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/topic_update_request'
      description: The new partition number or the configurations to be updated for
        the topic.
      required: true
  responses:
    bad_request:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
      description: The request body was invalid JSON.
    forbidden:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
      description: Not authorized to perform the operation.
    not_found:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
      description: The requested resource was not found.
    service_unavailable:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
      description: Service was unavailable.
    unauthorized:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
      description: Authentication information was missing or bad.
    unprocessable_entity:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
      description: The server was not able to process the request body.
  schemas:
    empty:
      description: Expected empty response could be {}.
      type: object
    error:
      properties:
        error_code:
          description: The 3-digits http status code plus 2-digits kafka error code.
          type: integer
        message:
          description: The error message.
          type: string
        incident_id:
          description: The incident ID of the error.
          type: string
      type: object
    topic_create_request:
      properties:
        name:
          description: The name of topic to be created.
          type: string
        partitions:
          description: The number of partitions.
          format: int64
          type: integer
        partition_count:
          default: 1
          description: The number of partitions, this field takes precedence over
            'partitions'. Default value is 1 if not specified.
          format: int64
          maximum: 1E+3
          minimum: 1
          type: integer
        configs:
          description: The config properties to be set for the new topic.
          items:
            $ref: '#/components/schemas/config_create'
          type: array
      type: object
    config_create:
      properties:
        name:
          description: The name of the config property.
          type: string
        value:
          description: The value for a config property.
          type: string
      type: object
    config_update:
      properties:
        name:
          description: The name of the config property.
          type: string
        value:
          description: The value for a config property.
          type: string
        reset_to_default:
          description: When true, the value of the config property is reset to its
            default value.
          type: boolean
      type: object
    topic_update_request:
      properties:
        new_total_partition_count:
          description: The new partition number to be increased.
          format: int32
          type: integer
        configs:
          description: |
            The config properties to be updated for the topic. Valid config keys are 'cleanup.policy', 'retention.ms', 'retention.bytes', 'segment.bytes', 'segment.ms', 'segment.index.bytes'.
          items:
            $ref: '#/components/schemas/config_update'
          type: array
      type: object
    topic_list:
      description: A list of 'topic_detail' is returned.
      items:
        $ref: '#/components/schemas/topic_detail'
      type: array
    topic_detail:
      example:
        partitions: 0
        replicationFactor: 6
        retentionMs: 1
        configs:
          cleanup.policy: cleanup.policy
          min.insync.replicas: min.insync.replicas
          retention.ms: retention.ms
          segment.bytes: segment.bytes
          segment.ms: segment.ms
          retention.bytes: retention.bytes
          segment.index.bytes: segment.index.bytes
        replicaAssignments:
        - brokers:
            replicas:
            - 5
            - 5
          id: 5
        - brokers:
            replicas:
            - 5
            - 5
          id: 5
        name: name
        cleanupPolicy: cleanupPolicy
      properties:
        name:
          description: The name of the topic.
          type: string
        partitions:
          description: The number of partitions.
          type: integer
        replicationFactor:
          description: The number of replication factor.
          type: integer
        retentionMs:
          description: The value of config property 'retention.ms'.
          type: integer
        cleanupPolicy:
          description: The value of config property 'cleanup.policy'.
          type: string
        configs:
          $ref: '#/components/schemas/topic_configs'
        replicaAssignments:
          description: The replia assignment of the topic.
          items:
            $ref: '#/components/schemas/replica_assignment'
          type: array
      type: object
    topic_configs:
      example:
        cleanup.policy: cleanup.policy
        min.insync.replicas: min.insync.replicas
        retention.ms: retention.ms
        segment.bytes: segment.bytes
        segment.ms: segment.ms
        retention.bytes: retention.bytes
        segment.index.bytes: segment.index.bytes
      properties:
        cleanup.policy:
          description: The value of config property 'cleanup.policy'.
          type: string
        min.insync.replicas:
          description: The value of config property 'min.insync.replicas'
          type: string
        retention.bytes:
          description: The value of config property 'retention.bytes'.
          type: string
        retention.ms:
          description: The value of config property 'retention.ms'
          type: string
        segment.bytes:
          description: The value of config property 'segment.bytes'.
          type: string
        segment.index.bytes:
          description: The value of config property 'segment.index.bytes'.
          type: string
        segment.ms:
          description: The value of config property 'segment.ms'.
          type: string
      type: object
    replica_assignment:
      example:
        brokers:
          replicas:
          - 5
          - 5
        id: 5
      properties:
        id:
          description: The ID of the partition.
          type: integer
        brokers:
          $ref: '#/components/schemas/replica_assignment_brokers'
      type: object
    replica_assignment_brokers:
      example:
        replicas:
        - 5
        - 5
      properties:
        replicas:
          items:
            description: The IDs of replicas of the partition.
            type: integer
          type: array
  securitySchemes:
    APIKeyAuth:
      description: |
        A valid API key is required to access this API.  API keys can be allocated via the IBM Cloud interface, and are associated with an instance of the Event Streams service. API key values must be supplied on every REST request using the `X-Auth-Token` HTTP header. Failure to specify a valid API key will result in the REST request failing with a 401 (Unauthorized) status code. `X-Auth-Token` header is deprecated, `Authorization` header is recommanded.
      in: header
      name: X-Auth-Token
      type: apiKey
    TokenAuth:
      description: |
        A valid token or API key is required to access this API. API keys can be allocated via the IBM Cloud interface, and are associated with an instance of the Event Streams service. Token is obtained upon login to IBM Cloud and is associated with the identity of the user. Either token or API key must be supplied on every REST request using the `Authorization` `Bearer ${TokenOrAPIKey}` HTTP header. Failure to do so will result in the REST request failing with a 401 (Unauthorized) status code.
      in: header
      name: Authorization
      type: apiKey
    BasicAuth:
      description: |
        To use basic authentication, the HTTP header name is `Authorization`, value is `Basic <base64 encoded value of username:password>. For both enterprise and standard plan, user name is `token`, password is API key.
      scheme: basic
      type: http
